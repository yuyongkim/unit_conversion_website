김유용님, 로컬 Cursor AI 환경에서 실행 가능한 화공 단위 변환 시스템의 PRD를 작성해드리겠습니다.

**이전 내용 대비 차이점:**
- **실행 중심 PRD**: 이론적 설계에서 Cursor AI로 즉시 구현 가능한 구체적 요구사항으로 전환
- **로컬 환경 최적화**: 김유용님의 하드웨어 사양(Ryzen 9 5900X, 64GB RAM)을 활용한 성능 전략 포함
- **협업 방법론**: Cursor AI를 "설계 파트너"로 활용하는 구체적 워크플로우 제시

# **화공 단위 변환 시스템 PRD (Product Requirements Document)**

## **1. 제품 정의**

**제품명**: ChemUnit Converter  
**개발 환경**: Cursor AI + 로컬 개발 (김유용님 환경 최적화)  
**배포 방식**: GitHub Pages 정적 웹앱  
**개발 철학**: 선설계·후구현, 검증 우선, 효율성 중심

**핵심 가치 제안**:
- **차원 불일치 원천 차단**: UI 레벨에서 물리적으로 불가능한 변환 시도를 방지
- **화공 특화**: psig, SCFM, 점도, 열전달계수 등 현업 필수 단위 완벽 지원
- **투명한 계산**: 모든 변환에 사용된 가정과 출처를 명시하여 신뢰성 확보
- **오프라인 우선**: API 호출 비용 제로, 네트워크 없이도 핵심 기능 동작

## **2. 핵심 기능 요구사항**

### **2.1 차원 기반 단위 선택 시스템**

**물리량 카테고리 우선 선택**:
사용자가 먼저 물리량(압력, 속도, 유량, 점도 등)을 선택하면 해당 카테고리의 단위만 표시되어 **차원적으로 불가능한 조합을 원천 차단**합니다.

**실시간 차원 벡터 미리보기**:
- 출발단위 선택 시 차원 벡터 `[M¹L⁻¹T⁻²]` 즉시 표시
- 목표단위 드롭다운은 동일 차원의 단위만 자동 필터링
- 차원 불일치 시도 시 명확한 경고와 대안 제안

**우선 지원 물리량** (MVP 범위):
```
1순위: 압력 (Pa, bar, psi, psig, atm, mmHg)
2순위: 유량 (m³/s, L/min, gpm, cfm, SCFM, NM³/h)  
3순위: 점도 (Pa·s, cP, cSt)
4순위: 속도 (m/s, ft/s, km/h, mph)
5순위: 밀도 (kg/m³, g/cm³, lb/ft³, API°)
```

### **2.2 오프셋 및 복합 단위 처리**

**온도 단위 특별 처리**:
- **절대온도 vs 온도차 모드**: K, °C, °F 입력 시 명확한 모드 선택 UI 제공
- **복합 단위 자동 인식**: W/(m²·K) 등은 자동으로 온도차(ΔT) 모드 강제 적용
- **오프셋 계산**: °C ↔ K 변환에서 273.15 오프셋 정확 적용

**게이지/절대 압력 구분**:
- psig, barg 입력 시 기준 대기압 자동 표시 및 주석
- 변환 결과에 사용된 기준압 명시 (예: "14.696 psia 기준")

### **2.3 통합 공학용 계산기**

**기본 단위 인식 계산**:
`(12 m/s) × (30 s)` 입력 시 자동으로 `360 m` 계산하고 결과를 메인 변환창으로 전송

**화공 특화 계산 카드**:
- **Reynolds 수**: `Re = ρvD/μ` (밀도, 속도, 직경, 점도)
- **압력-헤드 변환**: `H = ΔP/(ρg)` (압력차, 유체밀도)  
- **열플럭스**: `q = hΔT` (열전달계수, 온도차)
- **펌프 동력**: `P = QΔP/η` (유량, 압력차, 효율)

각 계산 결과는 **원클릭으로 메인 변환 시스템에 전송**되어 추가 단위 변환 가능

## **3. 데이터 아키텍처**

### **3.1 Git 기반 JSON 레지스트리**

**단일 진실 원본(Single Source of Truth)**: 모든 단위 정의는 Git의 JSON 파일에서 관리하고, 변경사항은 Pull Request를 통해서만 반영

**핵심 데이터 파일 구조**:
```
data/
├── units-registry.json          # 핵심 단위 정의
├── physical-quantities.json     # 물리량 카테고리
├── assumption-profiles.json     # STP/NTP 등 가정 프로필  
└── sources-metadata.json        # UCUM/NIST 출처 정보
```

### **3.2 데이터 수집 전략**

**우선순위 기반 소스 통합**:
1. **UCUM (GitHub)**: 단위 코드, 차원 정보, 문법 규칙
2. **Pint (NIST 기반)**: 정확한 변환계수, 오프셋 정보  
3. **화공 특화**: 수동 정의 (psig, SCFM, API° 등)

**충돌 해소 규칙**:
- 변환계수: NIST 기반(Pint) 우선
- 단위 코드: UCUM 표준 우선
- 차원 정의: UCUM 차원 벡터 우선
- 모든 값에 source_reference 필드로 근거 추적

## **4. 로컬 Cursor AI 협업 전략**

### **4.1 Cursor AI 활용 철학**

**설계 파트너로서의 역할**:
- **아이디어 검증**: 복잡한 로직의 논리적 일관성 확인
- **대안 제시**: 여러 구현 방법 중 최적안 선택 지원  
- **구조 설계**: 모듈화, 확장성을 고려한 아키텍처 조언

**효율적 협업 패턴**:
```
1. 김유용님이 요구사항과 제약조건 명시
2. Cursor AI가 구현 방법과 구조 제안  
3. 김유용님이 최종 설계 결정
4. Cursor AI가 확정된 설계를 바탕으로 구현
```

### **4.2 작업 패킷 설계**

**Phase 1: 데이터 기반 구축** (1주)
- 작업 A: UCUM XML 파싱 → JSON 변환 스크립트
- 작업 B: Pint 데이터 병합 → 충돌 해소 로직
- 작업 C: 차원 벡터 계산 → 검증 엔진

**Phase 2: 기본 UI 구현** (1주)  
- 작업 D: 물리량 카테고리 선택 UI
- 작업 E: 드롭다운 필터링 → 실시간 차원 검증
- 작업 F: 변환 결과 표시 → 가정/출처 명시

**Phase 3: 화공 특화 기능** (1주)
- 작업 G: 온도/오프셋 단위 처리 로직
- 작업 H: 복합 단위 파서 → 차원 계산
- 작업 I: 공학 계산기 카드 → 메인 시스템 연동

### **4.3 Cursor AI 프롬프트 템플릿**

**데이터 처리 프롬프트**:
```
"UCUM GitHub 레포의 ucum-essence.xml에서 압력 관련 단위들을 추출하여 
다음 JSON 스키마에 맞게 변환해줘:
- symbol, name, dimension_vector [M,L,T,Θ,N,I,J], si_factor
- 차원 벡터는 압력의 경우 [1,-1,-2,0,0,0,0]으로 계산
- 출처는 'UCUM_GitHub_commit_abc123' 형태로 기록"
```

**UI 구현 프롬프트**:
```
"unitconverters.net 스타일의 화공 단위 변환기 UI를 만들어줘.
요구사항:
- 3단 레이아웃: 카테고리 선택 | 변환 영역 | 계산기 패널
- 출발단위 선택 시 동일 차원의 목표단위만 드롭다운에 표시
- 차원 불일치 시 빨간 경고 + 유사 단위 제안
- 모바일 반응형 (김유용님이 태블릿에서도 사용 가능)"
```

## **5. 기술 요구사항**

### **5.1 김유용님 로컬 환경 최적화**

**하드웨어 활용 전략**:
- **CPU**: Ryzen 9 5900X 12코어 중 2-4코어 활용 (개발 서버 + 빌드)
- **메모리**: 64GB 중 최대 2GB 사용 (넉넉한 여유로 안정적 개발)
- **저장소**: SSD 활용으로 빠른 JSON 파일 I/O 및 Git 작업

**개발 스택**:
- **프론트엔드**: Vanilla JavaScript + HTML/CSS (복잡한 프레임워크 없이 빠른 로딩)
- **빌드 도구**: Vite (HMR으로 실시간 개발, 김유용님 환경에서 1초 내 리로딩)
- **테스트**: Vitest (로컬에서 빠른 단위 테스트 실행)

### **5.2 성능 목표**

**로컬 개발 환경**:
- **초기 로딩**: 1초 이내 (JSON 레지스트리 로드 완료)
- **변환 계산**: 30ms 이내 (실시간 타이핑 느낌)
- **차원 검증**: 50ms 이내 (드롭다운 필터링)
- **메모리 사용**: 브라우저에서 30MB 이하

**배포 환경 (GitHub Pages)**:
- **초기 로딩**: 2초 이내 (CDN을 통한 전세계 접근)
- **오프라인 동작**: PWA 캐싱으로 네트워크 없이도 핵심 기능 보장

## **6. 검증 및 품질 보증**

### **6.1 데이터 신뢰성 (김유용님의 '검증 우선' 원칙)**

**출처 추적 시스템**:
- 모든 변환계수에 NIST, UCUM 등 공식 출처 명시
- Git 커밋 SHA로 사용된 데이터 버전 고정
- 변경 이력 완전 추적 가능

**골든 테스트 스위트**:
```
압력: 1 psi = 6894.757 Pa (NIST SP 330 기준)
온도: 0°C = 273.15 K (정확히)  
유량: 1 SCFM = ? m³/s (60°F, 14.696 psia 조건)
점도: 1 cP = 0.001 Pa·s (정확히)
```

### **6.2 라운드트립 검증**

**양방향 변환 일관성**: A→B→A 변환 시 원래 값 복원 확인 (허용 오차 1e-10)
**차원 보존성**: 모든 변환에서 차원 벡터 불변성 검증
**오프셋 정확성**: 온도, 게이지 압력 등 오프셋 단위의 정확한 처리 확인

## **7. 성공 지표**

**기능적 지표**:
- **지원 단위 수**: 80개 이상 (화공 핵심 단위 100% 포함)
- **변환 정확도**: NIST 표준값 대비 오차 < 0.001%
- **차원 검증**: 불일치 조합 100% 차단

**사용성 지표**:
- **오류 발생률**: 차원 불일치 시도 < 1%
- **계산기 연동률**: 공학 계산 결과의 변환 활용 > 70%
- **오프라인 사용률**: PWA 설치 및 오프라인 모드 사용 측정

**개발 효율성**:
- **Cursor AI 협업**: 개발 시간 30% 단축 목표
- **코드 품질**: ESLint 0 에러, 테스트 커버리지 > 80%

## **8. 위험 관리**

**데이터 품질 리스크**:
- **대응**: UCUM과 Pint 간 충돌 시 우선순위 규칙 적용 + 수동 검증
- **모니터링**: 표준 데이터 업데이트 시 자동 회귀 테스트

**사용자 오류 리스크**:
- **대응**: UI 레벨에서 차원 불일치 원천 차단 + 명확한 경고 메시지
- **모니터링**: 사용자 피드백을 통한 오류 패턴 분석

**성능 리스크**:
- **대응**: 로컬 환경 최적화 + 점진적 기능 추가
- **모니터링**: 실시간 성능 측정 및 병목 지점 식별

## **9. 다음 단계**

**즉시 시작 가능한 작업**:
1. **UCUM 데이터 확보**: GitHub 레포 클론 및 XML 구조 분석
2. **Cursor AI 환경 설정**: 프로젝트 폴더 구조 및 기본 설정
3. **우선순위 물리량 선정**: 압력부터 시작할지, 유량부터 시작할지 결정

**김유용님 결정 필요 사항**:
- **시작 물리량**: 어떤 카테고리부터 우선 구현할지
- **표준상태 기준**: STP(0°C, 1atm) vs NTP(20°C, 1atm) 기본값
- **단위 표기**: μ vs u, ℓ vs L 등 표기법 통일 정책

이 PRD를 바탕으로 Cursor AI와 함께 **"현업에서 실제로 작동하는"** 화공 단위 변환 시스템을 단계적으로 구축해 나갈 수 있습니다. 어떤 Phase부터 시작하고 싶으신지 알려주시면, 해당 단계의 구체적인 Cursor AI 프롬프트와 작업 가이드를 제공해드리겠습니다.